--Opdracht 2
//boatname

--Opdracht 3
//voyage[.//hired]//boatname

--Opdracht 4
//voyage[.//boatname = "BATAVIA" ]//destination//harbour

--Opdracht 5
//voyage[.//boatname = "BATAVIA" and .//harbour = "Batavia"]

--Opdracht 6
//voyage[.//master = "Willem IJsbrandsz. Bontekoe"]

--Opdracht 7
//voyage[contains(.//particulars,"Cape of Good Hope")]

--Opdracht 8
//voyage[not(.//boatname)][1]

--Opdracht 9
//voyage[number='4144']/*[4]
returns the 4th sibling of the first child of the voyage with number 4144
//voyage[number='4144']//*[4]
returns the 4th sibling of the first 'grandchild' (i.e. the first child of the first child who has at least one child) of the voyage with number 4144
//voyage[number='4144']/descendant::*[4]
returns the 4th descendant of the voyage with number 4144, no matter if it is a child of a grandchild or whatever.

--Opdracht 10
(for $v in //voyage[.//master="Jakob de Vries"] order by $v/leftpage/departure ascending return $v)[1]

--Opdracht 11
<total>
<voyages>{count(//voyage)}</voyages>
<boats>{count(distinct-values(//boatname))}</boats>
<masters>{count(distinct-values(//master))}</masters>
</total>

OR

<total voyages="{count(//voyage)}" boats="{count(distinct-values(//boatname))}" masters="{count(distinct-values(//master))}" />

--Opdracht 12
sum(//soldiers//*)

--Opdracht 13
for $master in distinct-values(//master)
let $voyages := //voyage[.//master = $master]
order by count($voyages) descending
return <master name="{$master}" nrofvoyages="{count($voyages)}" />

--Opdracht 14
(for $master in distinct-values(//master)
let $voyages := //voyage[.//master = $master]
let $number_of_v := count($voyages)
order by  $number_of_v  descending
group by  $number_of_v
return <master names="{$master}" voyages="{$number_of_v}" />)[1]

--Opdracht 15
(for $boat in distinct-values(//boatname)
let $voyages := //voyage[.//boatname = $boat]
let $number_of_v := count($voyages)
order by  $number_of_v  descending
group by  $number_of_v
return <boat name="{$boat}" voyages="{$number_of_v}" />)[1]

--Opdracht 16
delete node //voyage[.//master = "Not used"]

--Opdracht 17
for $next_elem in subsequence(//particulars//next,0,100)
    let $voyage := //voyage[.//number = $next_elem]
    let $next := $next_elem
    let $boat := $voyage//boatname
    let $master :=  $voyage//master
    let $new := <next nr="{$next}">{$boat}{$master}</next>
  return replace node $next_elem with $new

--Opdracht 18
for $elem in (//onboard/*)
let $child := $elem/*
let $new := sum($child/text())
return replace node $elem with $new

--Opdracht 19
for $part in //particulars
where $part [text() contains text { "good hope" }]
return $part

--Opdracht 20
for $part score $s in //voyage
where $part contains text "cape" not in "cape of good hope"
order by $s
return $part

--Opdracht 21
for $arr score $s in //arrival
where not($arr contains text "....-..-.." using wildcards)
order by $s
return $arr